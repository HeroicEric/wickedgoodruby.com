.triangle.triangle-start-index

%section.detail-page
  %h1.section-title Schedule
  .section-wrap

    %h2.schedule-date Friday, Oct. 4
    %ul
      %li.detail-section#workshop
        %h2.detail-title Intro to Ruby on Rails Workshop
        %h3.schedule-time 9a&ndash;6p
        %a.schedule-speaker{:href => 'http://jumpstartlab.com/', :target => '_blank'} JumpstartLab
        %p.detail-info JumpstartLab offers the best web development training anywhere. They are known for our expertise in Ruby on Rails, but also instruct courses in jQuery, JavaScript, ExtJS, and Git.

    %h2.schedule-date Saturday, Oct. 5
    %ul
      %li.detail-section#stroopwafel
        %h2.detail-title Breakfast
        %h3.schedule-time 9a&ndash;10a
        %a.schedule-speaker{:href => '#', :target => '_blank'} New Relic
        %p.detail-info Saturday's continental breakfast is sponsored by Yesware. There will be vegetarian &amp; vegan options.
      %li.detail-section#cheng
        %h2.detail-title Creativity with Ruby-Processing
        %h3.schedule-time 10a&ndash;11a
        %a.schedule-speaker{:href => '/speakers#cheng'} Joanne Cheng
        %p.detail-info Many of us are developers working in great jobs that can, after a while, cause our minds to settle into habits. We work so hard to make deadlines that sometimes we forget to step out of our comfort zones. Enter Processing: Processing is a programming environment where developers can easily create images, animations, and visually interactive programs. A developer can break out of a rut by expressing themselves with beautiful interactions and visualizations through code. Out of the box, the Processing environment requires Java programming skills.
        %p.detail-info Ruby-Processing is a simple wrapper for the Processing framework that combines the visual-driven environment of Processing with the fun of writing Ruby. In this talk, we'll go through the ways to "sketch" with Ruby-Processing with several live coding examples and create something together. Through creativity, we can increase the breadth of problems we can solve in our day to day jobs.
      %li.detail-section#segal
        %h2.detail-title Towards Tooling; A Look at What is Missing From Our Toolbox
        %h3.schedule-time 11a&ndash;12p
        %a.schedule-speaker{:href => '/speakers#segal'} Loren Segal
        %p.detail-info You can usually judge the maturity of a programming language ecosystem by the breadth of its tooling. For example, Java has a plethora of IDEs that each, in turn, have many well maintained refactoring and code quality plugins (like FindBugs and PMD). C/C++ is equally well established in this space. Even JavaScript is becoming well represented, with a number of static code analyzers and language supersets (like Dart and TypeScript) aimed at improving tooling in the language. But where is Ruby in all of this? This talk will shed some light on the existing tools available in the Ruby world as well as some new tools just starting to be built out in the areas of static analysis, formal verification, and code quality checking. We will look at what kind of tools the Ruby community is good at building, what kind of tools we are bad at, and most of all, some of the tooling we should be working on to really improve our ecosystem and drive more developers to this wonderful language.
      %li.detail-section#scott
        %h2.detail-title Escaping Reality With Shoes
        %h3.schedule-time 12p&ndash;1p
        %a.schedule-speaker{:href => '/speakers#scott'} Zachary Scott
        %p.detail-info Are you bored of hearing about Rails, Node, or Ember? Is your day job hacking on the same Rails app getting the best of you? Maybe you're looking for a fun way to get into this programming thing.
        %p.detail-info Let's imagine for a moment, your boss just gave you the day off because you've managed to squash the remaining bugs and shipped some invaluable features. With all of this free time there's so many options, what do you dooo? I know! You can build a game and experiment with some new code in the Magical Land of Shoes.
        %p.detail-info _why once said, "if you program and want any longevity to your work, make a game. all else recycles, but people rewrite architectures to keep games alive."
        %p.detail-info It's important to step out of your comfort zone and try something new! This talk will give you a whirlwind tour and cover the essentials that Shoes has to offer.
        %p.detail-info Together we can build a fun little game you can share with your friends, and inspire you to venture to places you're unaccustomed to.
      %li.detail-section#meiklejohn
        %h2.detail-title Bloom: A language for disorderly distributed programming
        %h3.schedule-time 10a&ndash;11a
        %a.schedule-speaker{:href => '/speakers#meiklejohn'} Christopher Meiklejohn
        %p.detail-info Traditional programming languages use a model of computation where individual instructions are executed in order. However, when building distributed systems this model fails to match the reality of how your application code is actually executed. Bloom is a language which allows programmers to build applications as a series of unordered statements while also providing facilities for imposing a particular ordering of events when necessary.
        %p.detail-info During this talk we will explore building applications in Bud, which is a prototype of Bloom implemented as a domain specific language in Ruby. We will discuss the concepts of logical monotonicity, disorderly collections, the CALM principle which is the root of the Bloom language, and how to use he Bloom language to identify critical sections of your code where a coordiation library should be used to ensure consistency.
      %li.detail-section#haddox
        %h2.detail-title PEACE: Programming Expertly Amid Corporations & Enterprises
        %h3.schedule-time 11a&ndash;12p
        %a.schedule-speaker{:href => '/speakers#haddox'} Steven Haddox
        %p.detail-info Everyone casts the "Enterprise" as the most horrid place in the world to be a Ruby developer, and they used to be right. How does a Rubyist trying to stay current work in a confined and archaic environment with strict security restrictions? You do everything other Rubyists do, but you do it without sudo and from source. Together we'll identify the best open source self-hosted options for agile managment, provisioning, git hosting, error tracking, CI, isolated RVM, metrics, central logging, and security. As a bonus, you'll learn how to automate the setup of all these tools as much as possible without sudo privileges.
      %li.detail-section#garber
        %h2.detail-title Writing DSLs with Parslet
        %h3.schedule-time 12p&ndash;1p
        %a.schedule-speaker{:href => '/speakers#garber'} Jason Garber
        %p.detail-info A well-designed DSL improves programmer productivity and communication with domain experts. The Ruby community has produced a number of very popular external DSLs--Coffeescript, HAML, SASS, and Cucumber to name a few.
        %p.detail-info Parslet makes it easy to write these kinds of DSLs in pure Ruby. In this talk you’ll learn the basics, feel out the limitations of several approaches and find some common solutions. In no time, you’ll have the power to make a great new DSL, slurp in obscure file formats, modify or fork other people’s grammars (like Gherkin, TOML, or JSON), or even write your own programming language!
    %h2.schedule-date Sunday, Oct. 6
    %ul
      %li.detail-section#newrelic
        %h2.detail-title Breakfast
        %h3.schedule-time 9a&ndash;10a
        %a.schedule-speaker{:href => '#'} New Relic
        %p.detail-info Saturday's continental breakfast is sponsored by Yesware. There will be vegetarian &amp; vegan options.
      %li.detail-section#baker
        %h2.detail-title MagLev: Ruby With an Image
        %h3.schedule-time 10a&ndash;11a
        %a.schedule-speaker{:href => '/speakers#baker'} Steven R. Baker
        %p.detail-info MagLev is a fast, stable, 64-bit open source implementation of the Ruby programming language.
        %p.detail-info MagLev offers a complete Ruby implementation, on a fast and solid VM, and includes a scalable object database. In this talk, you'll learn how to transparently store real objects, how to leverage fast and mature Smalltalk libraries in your Ruby applications, and how to deploy applications written on one of the most mature virtual machines in use today.
      %li.detail-section#schneeman
        %h2.detail-title Dissecting Ruby with Ruby
        %h3.schedule-time 11a&ndash;12p
        %a.schedule-speaker{:href => '/speakers#schneeman'} Richard Schneeman
        %p.detail-info Underneath the beautiful veneer of our Ruby libraries lies a twisted tangle of writhing guts. Maybe you're curious how the pieces fit together or maybe you're tracking down a bug, either way it's easy to get lost in the blood and bile that ties our code together. In this talk you'll learn how to use simple and sharp Ruby tools to slice into large libraries with surgical precision. Turn your impossible bugs into pull requests, and level up your programming skills by Dissecting Ruby with Ruby.
      %li.detail-section#singh
        %h2.detail-title ActiveRecord is still magical
        %h3.schedule-time 12p&ndash;1p
        %a.schedule-speaker{:href => '/speakers#singh'} Neeraj Singh
        %p.detail-info ActiveRecord is complex code and because of complexity it has edge cases. In fact lots of edge cases. We will take a look at a number of ActiveRecord features to see how it works and how to deal with some of the edge cases.
        %p.detail-info We will see how default_scope works. And why method "unscoped" removes default_scope from models but not from associations.
        %p.detail-info Do you know the difference between CollectionProxy and Relation ? Do you know why in a has_many through case "@physician.patients.create!" would work but "@physician.patients.where(active: true).create! would silently fail without creating the association record?
        %p.detail-info We will discuss why while patching Active Record you should run your tests against all three databases.
        %p.detail-info Guess which of these two obey :destroy option: @customer.orders.delete(@order) or @customer.orders.destroy(@order).
        %p.detail-info In Rails 3 when where conditions are merged then the last where condition wins. In Rails 4 all the where conditions are 'And'ed. But not defautl_scope. We will see how and why.
        %p.detail-info Will also discuss implementation detail of features like inverse_of, autosave and callbacks.
      %li.detail-section#nicholaides
        %h2.detail-title Securing Your Rails App
        %h3.schedule-time 10a&ndash;11a
        %a.schedule-speaker{:href => '/speakers#nicholaides'} Mike Nicholaides
        %p.detail-info How can you know if your Rails app is safe? With potential vulnerabilities lurking in your app's code, in gems you depend on, in services you use, and in the Rails source itself, attackers have myriad vectors to gain access to your data, interrupt your service, and damage your reputation.
        %p.detail-info In this talk, I'll cover the basics of securing your Rails app, evaluating and mitigating the risk inherent in live web applications, and strategies for keeping your app secure as new threats emerge.
      %li.detail-section#gauthier
        %h2.detail-title Outside-In Testing
        %h3.schedule-time 11a&ndash;12p
        %a.schedule-speaker{:href => '/speakers#gauthier'} Nick Gauthier
        %p.detail-info As a freelancer I'm often tasked with creating high quality web applications quickly while keeping the budget razor thin. In my experience, the absolute best bang-for-your-buck style of development has been BDD from the outside-in via acceptance tests. With acceptance tests you can quickly and accurately determine the minimum code necessary to fit the requirements of an application while achieving high code coverage and resilience to refactoring. By their very nature acceptance tests are the the simplest kinds of tests to write since they are expressed in the language of an end-user. In this talk we'll implement a feature from the outside-in, explaining the reasoning behind every step.
      %li.detail-section#ballanco
        %h2.detail-title RubyMotion: Under the Hood
        %h3.schedule-time 12p&ndash;1p
        %a.schedule-speaker{:href => '/speakers#ballanco'} Joshua Ballanco
        %p.detail-info By now you probably know that RubyMotion is a new toolchain that lets you use familiar Ruby techniques to develop applications for iOS...but do you know what makes it tick? How is RubyMotion different from toolchains such as PhoneGap or Titanium? What does it mean to say that RubyMotion is implemented "on top of the Objective-C runtime"? And how the heck do I debug RubyMotion anyway?
        %p.detail-info I will attempt to answer these questions, and more, by looking deep into the underpinnings of RubyMotion. Along the way, I'll give a bit of an overview of the history of RubyMotion, and maybe even a glimpse at its future.
      %li.detail-section#menard
        %h2.detail-title JRuby: Insights from Six Years in Production
        %h3.schedule-time 10a&ndash;11a
        %a.schedule-speaker{:href => '/speakers#menard'} Mark Menard
        %p.detail-info JRuby is the primary alternative implementation of Ruby available. With support for native threads, excellent garbage collection, and the introduction of Invoke Dynamic it has grown into a formidable platform. So, what can JRuby do for you? Learn how JRuby differs from MRI, how JRuby supports parallelism, how to use Java libraries from JRuby, how to use Ruby from Java and more. Java no longer means just the language anymore, the JVM is an excellent place to host Ruby applications.
      %li.detail-section#campbell
        %h2.detail-title Hacking Your Home with Ruby
        %h3.schedule-time 11a&ndash;12p
        %a.schedule-speaker{:href => '/speakers#campbell'} Justin Campbell
        %p.detail-info 15 years ago, Justin looked forward to the day when he could have a stack of expensive audio equipment with speakers in every room, lights that follow him around, and an intercom system so the family could page each other like Tim "The Tool Man" Taylor.
        %p.detail-info Ubiquitous networking, APIs for consumer electronics, and cheap computers like the Raspberry Pi have made it easier than ever to automate your home. We go over some popular technologies, see some code to glue it all together, and watch a live demo of some of Justin's favorite house hacks.
      %li.detail-section#stolfo
        %h2.detail-title Thread Safety First
        %h3.schedule-time 12p&ndash;1p
        %a.schedule-speaker{:href => '/speakers#stolfo'} Emily Stolfo
        %p.detail-info We rubyists historically haven’t been in the habit of thinking about concurrency but the reality is that our thread-unsafe code often works by sheer luck. There are different implementations of Ruby with their own semantics that can unearth challenging and unexpected concurrency bugs in our code. We have to become more accustomed to writing threadsafe code in order to anticipate these potential surprises, especially in light of the rise in popularity of JRuby.
        %p.detail-info I will discuss approaches to writing threadsafe code in this talk, with a specific focus on performance considerations and testing. I'll start by explaining some basic concurrency concepts, describe methods for handling shared mutable data, and touch on the subtleties of concurrency primitives (Queue, ConditionVariable, Mutex). Hair-raising, real-world bugs will be used throughout the presentation to illustrate specific concurrency issues and techniques for solving them.
      %li.detail-section#alcorn
        %h2.detail-title Market Analytics in EVE with Ruby
        %h3.schedule-time 10a&ndash;11a
        %a.schedule-speaker{:href => '/speakers#alcorn'} Doug Alcorn
        %p.detail-info Ever wondered about market trading, analytics or algorithms but didn't want to lose your shirt experimenting? EVE Online is a Massively Multiplayer Online Role Playing Game (MMORPG) rich in data with a fully functional, player driven economy. Using some simple concepts and novel tools you can get access to this data and discover interesting things. This talk will introduce you to market analytics and the cruel world of EVE Online.
      %li.detail-section#vargo
        %h2.detail-title Using Ruby to Automate Your Life
        %h3.schedule-time 11a&ndash;12p
        %a.schedule-speaker{:href => '/speakers#vargo'} Seth Vargo
        %p.detail-info You probably use Ruby everyday, so why not use Ruby to automate some common tasks? What if you could spin up an EC2 instance and have it automatically configure your web server, database, users, and more? What if you could effectively capture and replicate your production environments reliably and consistently? What if you could then give developers production-like environments as Virtual Machines, with no additional work? What if you could set up your new laptop with multiple Ruby versions, your favorite software, and even change the desktop background - from a single command? The good news is - you can!
        %p.detail-info Chef is a configuration management and automation tool that solves these problems and many more. In this talk, you'll learn common just how easy it is to capture your infrastructure in Chef. Save time and money by using Chef's Ruby DSL to "define" your laptop.
        %p.detail-info How many times have you bought a new laptop and realize just how much stuff you installed over the years? If you're using Chef, run a single command and all your favorite Applications, Preferences, and even passwords are back in place. And the best part - because Chef is written in Ruby, you get to continue using the language you love!
      %li.detail-section#desjardins
        %h2.detail-title Rails Sojourn: One Man's Journey
        %h3.schedule-time 12p&ndash;1p
        %a.schedule-speaker{:href => '/speakers#desjardins'} Mike Desjardins
        %p.detail-info With several spawling, monolithic Rails apps under my belt, I had the opportunity to go a different route. Bulging models, obtuse controllers, and views chock full of logic were my world. When I came up for air, all the cool kids were writing thick clients with svelte backends. Perhaps Sinatra and some hip Javascript framework were the way? Here's what I learned...

    %h2.schedule-date Monday, Oct. 7
    %ul
      %li.detail-section#retreat
        %h2.detail-title Code Retreat
        %h3.schedule-time 9a&ndash;6p
        %a.schedule-speaker{:href => '#'} Corey Haines
        %p.detail-info Join Corey Haines at the DockYard office on Tremont Street for a day-long hackathon. Work on any project you like or have some fun with your peers.

.triangle.triangle-end
